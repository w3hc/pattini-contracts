{
    "address": "0xB6862c491a9f5B0E59DE1e454152fB37B208294F",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_initialOwner",
                    "type": "address"
                },
                {
                    "internalType": "string",
                    "name": "_repositoryName",
                    "type": "string"
                },
                {
                    "internalType": "address",
                    "name": "_tokenAddress",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_funderAddress",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                }
            ],
            "name": "OwnableInvalidOwner",
            "type": "error"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                }
            ],
            "name": "OwnableUnauthorizedAccount",
            "type": "error"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "previousOwner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "newOwner",
                    "type": "address"
                }
            ],
            "name": "OwnershipTransferred",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "issue",
                    "type": "uint256"
                },
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "pullRequest",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "timestamp",
                    "type": "uint256"
                }
            ],
            "name": "Paid",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "issue",
                    "type": "uint256"
                },
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "recipient",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "timestamp",
                    "type": "uint256"
                }
            ],
            "name": "Taken",
            "type": "event"
        },
        {
            "stateMutability": "payable",
            "type": "fallback"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "contributions",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "issue",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                },
                {
                    "internalType": "address",
                    "name": "recipient",
                    "type": "address"
                },
                {
                    "internalType": "bool",
                    "name": "paid",
                    "type": "bool"
                },
                {
                    "internalType": "uint256",
                    "name": "pullRequest",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "flush",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "funderAddress",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_issue",
                    "type": "uint256"
                }
            ],
            "name": "getIssue",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "uint256",
                            "name": "issue",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "amount",
                            "type": "uint256"
                        },
                        {
                            "internalType": "address",
                            "name": "recipient",
                            "type": "address"
                        },
                        {
                            "internalType": "bool",
                            "name": "paid",
                            "type": "bool"
                        },
                        {
                            "internalType": "uint256",
                            "name": "pullRequest",
                            "type": "uint256"
                        }
                    ],
                    "internalType": "struct Pattini.Contribution",
                    "name": "",
                    "type": "tuple"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "owner",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_issue",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "_pullRequest",
                    "type": "uint256"
                }
            ],
            "name": "pay",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "renounceOwnership",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "repositoryName",
            "outputs": [
                {
                    "internalType": "string",
                    "name": "",
                    "type": "string"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_issue",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "_amount",
                    "type": "uint256"
                },
                {
                    "internalType": "address",
                    "name": "_recipient",
                    "type": "address"
                }
            ],
            "name": "take",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "tokenAddress",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "newOwner",
                    "type": "address"
                }
            ],
            "name": "transferOwnership",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "stateMutability": "payable",
            "type": "receive"
        }
    ],
    "transactionHash": "0x2b77efead1d0f51e9792b37d8977c490beac83f8c21aa63dc44af6b0751ba490",
    "receipt": {
        "to": null,
        "from": "0x27292E1a901E3E0bE7d144aDba4CAD07da2d8a42",
        "contractAddress": "0xB6862c491a9f5B0E59DE1e454152fB37B208294F",
        "transactionIndex": 3,
        "gasUsed": "960746",
        "logsBloom": "0x
        "blockHash": "0xf143f338400923dca0138849dfd3d0a79cc8dfe19757a6f98f6e3604e9b3d4f8",
        "transactionHash": "0x2b77efead1d0f51e9792b37d8977c490beac83f8c21aa63dc44af6b0751ba490",
        "logs": [
            {
                "transactionIndex": 3,
                "blockNumber": 9822309,
                "transactionHash": "0x2b77efead1d0f51e9792b37d8977c490beac83f8c21aa63dc44af6b0751ba490",
                "address": "0xB6862c491a9f5B0E59DE1e454152fB37B208294F",
                "topics": [
                    "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
                    "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "0x00000000000000000000000027292e1a901e3e0be7d144adba4cad07da2d8a42"
                ],
                "data": "0x",
                "logIndex": 7,
                "blockHash": "0xf143f338400923dca0138849dfd3d0a79cc8dfe19757a6f98f6e3604e9b3d4f8"
            }
        ],
        "blockNumber": 9822309,
        "cumulativeGasUsed": "1590448",
        "status": 1,
        "byzantium": true
    },
    "args": [
        "0x27292E1a901E3E0bE7d144aDba4CAD07da2d8a42",
        "github-action-test",
        "0xe6bcd785b90dc16d667b022cc871c046587d9ac5",
        "0xD8a394e7d7894bDF2C57139fF17e5CBAa29Dd977"
    ],
    "numDeployments": 1,
    "solcInputHash": "3a59a33e854ef2db6dd5a974fd19919c",
    "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_repositoryName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_funderAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"issue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pullRequest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Paid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"issue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Taken\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contributions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"issue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"pullRequest\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flush\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"funderAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_issue\",\"type\":\"uint256\"}],\"name\":\"getIssue\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"issue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"pullRequest\",\"type\":\"uint256\"}],\"internalType\":\"struct Pattini.Contribution\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_issue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pullRequest\",\"type\":\"uint256\"}],\"name\":\"pay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repositoryName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_issue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"take\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Pattini.sol\":\"Pattini\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/Pattini.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract Pattini is Ownable {\\n    string public repositoryName;\\n    address public tokenAddress;\\n    address public funderAddress;\\n\\n    struct Contribution {\\n        uint256 issue; // issue number\\n        uint256 amount; // `amount` Github project custom field\\n        address recipient; // contributor address\\n        bool paid;\\n        uint256 pullRequest;\\n    }\\n\\n    Contribution[] public contributions;\\n\\n    event Taken(\\n        uint256 indexed issue,\\n        uint256 indexed amount,\\n        address indexed recipient,\\n        uint256 timestamp\\n    );\\n\\n    event Paid(uint256 indexed issue, uint256 indexed pullRequest, uint256 timestamp);\\n\\n    constructor(\\n        address _initialOwner,\\n        string memory _repositoryName,\\n        address _tokenAddress,\\n        address _funderAddress\\n    ) Ownable(_initialOwner) {\\n        repositoryName = _repositoryName;\\n        tokenAddress = _tokenAddress;\\n        funderAddress = _funderAddress;\\n    }\\n\\n    modifier onlyFunder() {\\n        require(msg.sender == funderAddress, \\\"Caller is not the funder\\\");\\n        _;\\n    }\\n\\n    function take(uint256 _issue, uint256 _amount, address _recipient) public onlyOwner {\\n        uint256 index = getIndex(_issue);\\n        require(index == contributions.length || !contributions[index].paid, \\\"Issue already paid\\\");\\n\\n        contributions.push(\\n            Contribution({\\n                issue: _issue,\\n                amount: _amount,\\n                recipient: _recipient,\\n                paid: false,\\n                pullRequest: 0\\n            })\\n        );\\n        emit Taken(_issue, _amount, _recipient, block.timestamp);\\n    }\\n\\n    function pay(uint256 _issue, uint256 _pullRequest) public onlyOwner {\\n        uint256 i = getIndex(_issue);\\n        require(!contributions[i].paid, \\\"Issue already paid\\\");\\n\\n        contributions[i].pullRequest = _pullRequest;\\n        contributions[i].paid = true;\\n\\n        ERC20(tokenAddress).transfer(\\n            contributions[i].recipient,\\n            contributions[i].amount * 10 ** 18\\n        );\\n        emit Paid(_issue, _pullRequest, block.timestamp);\\n    }\\n\\n    function flush() public onlyFunder {\\n        uint256 totalPending;\\n        for (uint256 i; i < contributions.length; i++) {\\n            if (contributions[i].paid == false) {\\n                for (uint256 x; x < contributions.length; x++) {\\n                    if (contributions[i].issue == contributions[x].issue) {} else {\\n                        totalPending = totalPending + contributions[i].amount;\\n                    }\\n                }\\n            }\\n        }\\n        uint256 withdrawableAmount = ERC20(tokenAddress).balanceOf(address(this)) -\\n            (ERC20(tokenAddress).balanceOf(address(this)) - (totalPending * 10 ** 18));\\n\\n        ERC20(tokenAddress).transfer(funderAddress, withdrawableAmount);\\n    }\\n\\n    function getIndex(uint256 _issue) private view returns (uint256) {\\n        for (uint256 i; i < contributions.length; i++) {\\n            if (contributions[i].issue == _issue) {\\n                return i;\\n            }\\n        }\\n        return contributions.length;\\n    }\\n\\n    function getIssue(uint256 _issue) public view returns (Contribution memory) {\\n        uint256 index = getIndex(_issue);\\n        return contributions[index];\\n    }\\n\\n    receive() external payable {\\n        revert();\\n    }\\n\\n    fallback() external payable {\\n        revert();\\n    }\\n}\\n\",\"keccak256\":\"0x8963b0dfa7da63f0fd636fa23b10cf7dc98d4fb6a86286955fc4dab85860957c\",\"license\":\"GPL-3.0\"}},\"version\":1}",
    "bytecode": "0x60806040523480156200001157600080fd5b506040516200122c3803806200122c833981016040819052620000349162000137565b836001600160a01b0381166200006457604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6200006f81620000b4565b5060016200007e8482620002d4565b50600280546001600160a01b039384166001600160a01b0319918216179091556003805492909316911617905550620003a09050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200011c57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600080600080608085870312156200014e57600080fd5b620001598562000104565b602086810151919550906001600160401b03808211156200017957600080fd5b818801915088601f8301126200018e57600080fd5b815181811115620001a357620001a362000121565b604051601f8201601f19908116603f01168101908382118183101715620001ce57620001ce62000121565b816040528281528b86848701011115620001e757600080fd5b600093505b828410156200020b5784840186015181850187015292850192620001ec565b60008684830101528098505050505050506200022a6040860162000104565b91506200023a6060860162000104565b905092959194509250565b600181811c908216806200025a57607f821691505b6020821081036200027b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002cf57600081815260208120601f850160051c81016020861015620002aa5750805b601f850160051c820191505b81811015620002cb57828155600101620002b6565b5050505b505050565b81516001600160401b03811115620002f057620002f062000121565b620003088162000301845462000245565b8462000281565b602080601f831160018114620003405760008415620003275750858301515b600019600386901b1c1916600185901b178555620002cb565b600085815260208120601f198616915b82811015620003715788860151825594840194600190910190840162000350565b5085821015620003905787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b610e7c80620003b06000396000f3fe6080604052600436106100a05760003560e01c8063976b311311610064578063976b31131461018a5780639d76ea58146101f2578063adec5ed514610212578063b4ee031814610232578063ef48eee614610252578063f2fde38b1461027257600080fd5b80631cee0700146100af5780636b9f96ea1461010a578063715018a61461012157806386019a3f146101365780638da5cb5b1461015857600080fd5b366100aa57600080fd5b600080fd5b3480156100bb57600080fd5b506100cf6100ca366004610c4d565b610292565b6040805195865260208601949094526001600160a01b03909216928401929092529015156060830152608082015260a0015b60405180910390f35b34801561011657600080fd5b5061011f6102e2565b005b34801561012d57600080fd5b5061011f6105bf565b34801561014257600080fd5b5061014b6105d3565b6040516101019190610c66565b34801561016457600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610101565b34801561019657600080fd5b506101aa6101a5366004610c4d565b610661565b604051610101919081518152602080830151908201526040808301516001600160a01b0316908201526060808301511515908201526080918201519181019190915260a00190565b3480156101fe57600080fd5b50600254610172906001600160a01b031681565b34801561021e57600080fd5b50600354610172906001600160a01b031681565b34801561023e57600080fd5b5061011f61024d366004610cd0565b610725565b34801561025e57600080fd5b5061011f61026d366004610d05565b610904565b34801561027e57600080fd5b5061011f61028d366004610d27565b610b37565b600481815481106102a257600080fd5b60009182526020909120600490910201805460018201546002830154600390930154919350916001600160a01b03811691600160a01b90910460ff169085565b6003546001600160a01b031633146103415760405162461bcd60e51b815260206004820152601860248201527f43616c6c6572206973206e6f74207468652066756e646572000000000000000060448201526064015b60405180910390fd5b6000805b60045481101561043e576004818154811061036257610362610d49565b6000918252602082206002600490920201015460ff600160a01b909104161515900361042c5760005b60045481101561042a57600481815481106103a8576103a8610d49565b906000526020600020906004020160000154600483815481106103cd576103cd610d49565b906000526020600020906004020160000154031561041857600482815481106103f8576103f8610d49565b906000526020600020906004020160010154836104159190610d75565b92505b8061042281610d8e565b91505061038b565b505b8061043681610d8e565b915050610345565b50600061045382670de0b6b3a7640000610da7565b6002546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa15801561049b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bf9190610dbe565b6104c99190610dd7565b6002546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610511573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105359190610dbe565b61053f9190610dd7565b60025460035460405163a9059cbb60e01b81526001600160a01b03918216600482015260248101849052929350169063a9059cbb906044016020604051808303816000875af1158015610596573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ba9190610dea565b505050565b6105c7610b75565b6105d16000610ba2565b565b600180546105e090610e0c565b80601f016020809104026020016040519081016040528092919081815260200182805461060c90610e0c565b80156106595780601f1061062e57610100808354040283529160200191610659565b820191906000526020600020905b81548152906001019060200180831161063c57829003601f168201915b505050505081565b61069e6040518060a00160405280600081526020016000815260200160006001600160a01b03168152602001600015158152602001600081525090565b60006106a983610bf2565b9050600481815481106106be576106be610d49565b60009182526020918290206040805160a08101825260049093029091018054835260018101549383019390935260028301546001600160a01b0381169183019190915260ff600160a01b909104161515606082015260039091015460808201529392505050565b61072d610b75565b600061073884610bf2565b60045490915081148061077a57506004818154811061075957610759610d49565b906000526020600020906004020160020160149054906101000a900460ff16155b6107bb5760405162461bcd60e51b8152602060048201526012602482015271125cdcdd5948185b1c9958591e481c185a5960721b6044820152606401610338565b6040805160a081018252858152602081018581526001600160a01b038086168385018181526000606086018181526080870182815260048054600181018255938190529751929097027f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b81019290925594517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c82015590517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19d8201805495511515600160a01b026001600160a81b031990961691909416179390931790915591517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19e909101559051849086907f22049d44e4c791ddc0713075a2cf0256959d04b027427b08bf5b8c0e9c75e4de906108f69042815260200190565b60405180910390a450505050565b61090c610b75565b600061091783610bf2565b90506004818154811061092c5761092c610d49565b906000526020600020906004020160020160149054906101000a900460ff161561098d5760405162461bcd60e51b8152602060048201526012602482015271125cdcdd5948185b1c9958591e481c185a5960721b6044820152606401610338565b81600482815481106109a1576109a1610d49565b9060005260206000209060040201600301819055506001600482815481106109cb576109cb610d49565b906000526020600020906004020160020160146101000a81548160ff021916908315150217905550600260009054906101000a90046001600160a01b03166001600160a01b031663a9059cbb60048381548110610a2a57610a2a610d49565b906000526020600020906004020160020160009054906101000a90046001600160a01b031660048481548110610a6257610a62610d49565b906000526020600020906004020160010154670de0b6b3a7640000610a879190610da7565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610ad2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af69190610dea565b5081837f6015fce7263ca58690e6c17944e54e2fd202d8f1141f0a9f5cdcd6ec8598dd8b42604051610b2a91815260200190565b60405180910390a3505050565b610b3f610b75565b6001600160a01b038116610b6957604051631e4fbdf760e01b815260006004820152602401610338565b610b7281610ba2565b50565b6000546001600160a01b031633146105d15760405163118cdaa760e01b8152336004820152602401610338565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000805b600454811015610c43578260048281548110610c1457610c14610d49565b90600052602060002090600402016000015403610c315792915050565b80610c3b81610d8e565b915050610bf6565b5050600454919050565b600060208284031215610c5f57600080fd5b5035919050565b600060208083528351808285015260005b81811015610c9357858101830151858201604001528201610c77565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114610ccb57600080fd5b919050565b600080600060608486031215610ce557600080fd5b8335925060208401359150610cfc60408501610cb4565b90509250925092565b60008060408385031215610d1857600080fd5b50508035926020909101359150565b600060208284031215610d3957600080fd5b610d4282610cb4565b9392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115610d8857610d88610d5f565b92915050565b600060018201610da057610da0610d5f565b5060010190565b8082028115828204841417610d8857610d88610d5f565b600060208284031215610dd057600080fd5b5051919050565b81810381811115610d8857610d88610d5f565b600060208284031215610dfc57600080fd5b81518015158114610d4257600080fd5b600181811c90821680610e2057607f821691505b602082108103610e4057634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220317bb4218314a5a574fe2746f09dbeb10782db1f157c7766cd44d0b10d462d2b64736f6c63430008140033",
    "deployedBytecode": "0x6080604052600436106100a05760003560e01c8063976b311311610064578063976b31131461018a5780639d76ea58146101f2578063adec5ed514610212578063b4ee031814610232578063ef48eee614610252578063f2fde38b1461027257600080fd5b80631cee0700146100af5780636b9f96ea1461010a578063715018a61461012157806386019a3f146101365780638da5cb5b1461015857600080fd5b366100aa57600080fd5b600080fd5b3480156100bb57600080fd5b506100cf6100ca366004610c4d565b610292565b6040805195865260208601949094526001600160a01b03909216928401929092529015156060830152608082015260a0015b60405180910390f35b34801561011657600080fd5b5061011f6102e2565b005b34801561012d57600080fd5b5061011f6105bf565b34801561014257600080fd5b5061014b6105d3565b6040516101019190610c66565b34801561016457600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610101565b34801561019657600080fd5b506101aa6101a5366004610c4d565b610661565b604051610101919081518152602080830151908201526040808301516001600160a01b0316908201526060808301511515908201526080918201519181019190915260a00190565b3480156101fe57600080fd5b50600254610172906001600160a01b031681565b34801561021e57600080fd5b50600354610172906001600160a01b031681565b34801561023e57600080fd5b5061011f61024d366004610cd0565b610725565b34801561025e57600080fd5b5061011f61026d366004610d05565b610904565b34801561027e57600080fd5b5061011f61028d366004610d27565b610b37565b600481815481106102a257600080fd5b60009182526020909120600490910201805460018201546002830154600390930154919350916001600160a01b03811691600160a01b90910460ff169085565b6003546001600160a01b031633146103415760405162461bcd60e51b815260206004820152601860248201527f43616c6c6572206973206e6f74207468652066756e646572000000000000000060448201526064015b60405180910390fd5b6000805b60045481101561043e576004818154811061036257610362610d49565b6000918252602082206002600490920201015460ff600160a01b909104161515900361042c5760005b60045481101561042a57600481815481106103a8576103a8610d49565b906000526020600020906004020160000154600483815481106103cd576103cd610d49565b906000526020600020906004020160000154031561041857600482815481106103f8576103f8610d49565b906000526020600020906004020160010154836104159190610d75565b92505b8061042281610d8e565b91505061038b565b505b8061043681610d8e565b915050610345565b50600061045382670de0b6b3a7640000610da7565b6002546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa15801561049b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bf9190610dbe565b6104c99190610dd7565b6002546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610511573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105359190610dbe565b61053f9190610dd7565b60025460035460405163a9059cbb60e01b81526001600160a01b03918216600482015260248101849052929350169063a9059cbb906044016020604051808303816000875af1158015610596573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ba9190610dea565b505050565b6105c7610b75565b6105d16000610ba2565b565b600180546105e090610e0c565b80601f016020809104026020016040519081016040528092919081815260200182805461060c90610e0c565b80156106595780601f1061062e57610100808354040283529160200191610659565b820191906000526020600020905b81548152906001019060200180831161063c57829003601f168201915b505050505081565b61069e6040518060a00160405280600081526020016000815260200160006001600160a01b03168152602001600015158152602001600081525090565b60006106a983610bf2565b9050600481815481106106be576106be610d49565b60009182526020918290206040805160a08101825260049093029091018054835260018101549383019390935260028301546001600160a01b0381169183019190915260ff600160a01b909104161515606082015260039091015460808201529392505050565b61072d610b75565b600061073884610bf2565b60045490915081148061077a57506004818154811061075957610759610d49565b906000526020600020906004020160020160149054906101000a900460ff16155b6107bb5760405162461bcd60e51b8152602060048201526012602482015271125cdcdd5948185b1c9958591e481c185a5960721b6044820152606401610338565b6040805160a081018252858152602081018581526001600160a01b038086168385018181526000606086018181526080870182815260048054600181018255938190529751929097027f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b81019290925594517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c82015590517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19d8201805495511515600160a01b026001600160a81b031990961691909416179390931790915591517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19e909101559051849086907f22049d44e4c791ddc0713075a2cf0256959d04b027427b08bf5b8c0e9c75e4de906108f69042815260200190565b60405180910390a450505050565b61090c610b75565b600061091783610bf2565b90506004818154811061092c5761092c610d49565b906000526020600020906004020160020160149054906101000a900460ff161561098d5760405162461bcd60e51b8152602060048201526012602482015271125cdcdd5948185b1c9958591e481c185a5960721b6044820152606401610338565b81600482815481106109a1576109a1610d49565b9060005260206000209060040201600301819055506001600482815481106109cb576109cb610d49565b906000526020600020906004020160020160146101000a81548160ff021916908315150217905550600260009054906101000a90046001600160a01b03166001600160a01b031663a9059cbb60048381548110610a2a57610a2a610d49565b906000526020600020906004020160020160009054906101000a90046001600160a01b031660048481548110610a6257610a62610d49565b906000526020600020906004020160010154670de0b6b3a7640000610a879190610da7565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610ad2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af69190610dea565b5081837f6015fce7263ca58690e6c17944e54e2fd202d8f1141f0a9f5cdcd6ec8598dd8b42604051610b2a91815260200190565b60405180910390a3505050565b610b3f610b75565b6001600160a01b038116610b6957604051631e4fbdf760e01b815260006004820152602401610338565b610b7281610ba2565b50565b6000546001600160a01b031633146105d15760405163118cdaa760e01b8152336004820152602401610338565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000805b600454811015610c43578260048281548110610c1457610c14610d49565b90600052602060002090600402016000015403610c315792915050565b80610c3b81610d8e565b915050610bf6565b5050600454919050565b600060208284031215610c5f57600080fd5b5035919050565b600060208083528351808285015260005b81811015610c9357858101830151858201604001528201610c77565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114610ccb57600080fd5b919050565b600080600060608486031215610ce557600080fd5b8335925060208401359150610cfc60408501610cb4565b90509250925092565b60008060408385031215610d1857600080fd5b50508035926020909101359150565b600060208284031215610d3957600080fd5b610d4282610cb4565b9392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115610d8857610d88610d5f565b92915050565b600060018201610da057610da0610d5f565b5060010190565b8082028115828204841417610d8857610d88610d5f565b600060208284031215610dd057600080fd5b5051919050565b81810381811115610d8857610d88610d5f565b600060208284031215610dfc57600080fd5b81518015158114610d4257600080fd5b600181811c90821680610e2057607f821691505b602082108103610e4057634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220317bb4218314a5a574fe2746f09dbeb10782db1f157c7766cd44d0b10d462d2b64736f6c63430008140033",
    "devdoc": {
        "errors": {
            "OwnableInvalidOwner(address)": [
                {
                    "details": "The owner is not a valid owner account. (eg. `address(0)`)"
                }
            ],
            "OwnableUnauthorizedAccount(address)": [
                {
                    "details": "The caller account is not authorized to perform an operation."
                }
            ]
        },
        "kind": "dev",
        "methods": {
            "owner()": {
                "details": "Returns the address of the current owner."
            },
            "renounceOwnership()": {
                "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
            },
            "transferOwnership(address)": {
                "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
            }
        },
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 8,
                "contract": "contracts/Pattini.sol:Pattini",
                "label": "_owner",
                "offset": 0,
                "slot": "0",
                "type": "t_address"
            },
            {
                "astId": 941,
                "contract": "contracts/Pattini.sol:Pattini",
                "label": "repositoryName",
                "offset": 0,
                "slot": "1",
                "type": "t_string_storage"
            },
            {
                "astId": 943,
                "contract": "contracts/Pattini.sol:Pattini",
                "label": "tokenAddress",
                "offset": 0,
                "slot": "2",
                "type": "t_address"
            },
            {
                "astId": 945,
                "contract": "contracts/Pattini.sol:Pattini",
                "label": "funderAddress",
                "offset": 0,
                "slot": "3",
                "type": "t_address"
            },
            {
                "astId": 960,
                "contract": "contracts/Pattini.sol:Pattini",
                "label": "contributions",
                "offset": 0,
                "slot": "4",
                "type": "t_array(t_struct(Contribution)956_storage)dyn_storage"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_array(t_struct(Contribution)956_storage)dyn_storage": {
                "base": "t_struct(Contribution)956_storage",
                "encoding": "dynamic_array",
                "label": "struct Pattini.Contribution[]",
                "numberOfBytes": "32"
            },
            "t_bool": {
                "encoding": "inplace",
                "label": "bool",
                "numberOfBytes": "1"
            },
            "t_string_storage": {
                "encoding": "bytes",
                "label": "string",
                "numberOfBytes": "32"
            },
            "t_struct(Contribution)956_storage": {
                "encoding": "inplace",
                "label": "struct Pattini.Contribution",
                "members": [
                    {
                        "astId": 947,
                        "contract": "contracts/Pattini.sol:Pattini",
                        "label": "issue",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_uint256"
                    },
                    {
                        "astId": 949,
                        "contract": "contracts/Pattini.sol:Pattini",
                        "label": "amount",
                        "offset": 0,
                        "slot": "1",
                        "type": "t_uint256"
                    },
                    {
                        "astId": 951,
                        "contract": "contracts/Pattini.sol:Pattini",
                        "label": "recipient",
                        "offset": 0,
                        "slot": "2",
                        "type": "t_address"
                    },
                    {
                        "astId": 953,
                        "contract": "contracts/Pattini.sol:Pattini",
                        "label": "paid",
                        "offset": 20,
                        "slot": "2",
                        "type": "t_bool"
                    },
                    {
                        "astId": 955,
                        "contract": "contracts/Pattini.sol:Pattini",
                        "label": "pullRequest",
                        "offset": 0,
                        "slot": "3",
                        "type": "t_uint256"
                    }
                ],
                "numberOfBytes": "128"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            }
        }
    }
}
