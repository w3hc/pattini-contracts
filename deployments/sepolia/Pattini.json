{
  "address": "0x4ce76EA09136fA38CD54c2EE82ab8403A9b8A414",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_repositoryName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_funderAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "issue",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pullRequest",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "commitHash",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Paid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "issue",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "previousCommitHash",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Taken",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "contributions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "issue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "previousCommitHash",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "paid",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "pullRequest",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "commitHash",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_issue",
          "type": "uint256"
        }
      ],
      "name": "flush",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "funderAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_issue",
          "type": "uint256"
        }
      ],
      "name": "getIssue",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "issue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "previousCommitHash",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "paid",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "pullRequest",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "commitHash",
              "type": "string"
            }
          ],
          "internalType": "struct Pattini.Contribution",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_issue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_pullRequest",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_commitHash",
          "type": "string"
        }
      ],
      "name": "pay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "repositoryName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_issue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_previousCommitHash",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "take",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x11e99164b3d17d4eeffe35c0d2e15336fac90cae6c650cd25b8ddf6e32290b2c",
  "receipt": {
    "to": null,
    "from": "0xd63ed6E274bedb34D9666B8f62ed32a73C43DD9e",
    "contractAddress": "0x4ce76EA09136fA38CD54c2EE82ab8403A9b8A414",
    "transactionIndex": 142,
    "gasUsed": "1092831",
    "logsBloom": "0x
    "blockHash": "0xaa630cea6bc2fe8b576031e14aabb89038c1442db066d484813d1d278e0ea62b",
    "transactionHash": "0x11e99164b3d17d4eeffe35c0d2e15336fac90cae6c650cd25b8ddf6e32290b2c",
    "logs": [
      {
        "transactionIndex": 142,
        "blockNumber": 5157990,
        "transactionHash": "0x11e99164b3d17d4eeffe35c0d2e15336fac90cae6c650cd25b8ddf6e32290b2c",
        "address": "0x4ce76EA09136fA38CD54c2EE82ab8403A9b8A414",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d63ed6e274bedb34d9666b8f62ed32a73c43dd9e"
        ],
        "data": "0x",
        "logIndex": 173,
        "blockHash": "0xaa630cea6bc2fe8b576031e14aabb89038c1442db066d484813d1d278e0ea62b"
      }
    ],
    "blockNumber": 5157990,
    "cumulativeGasUsed": "13492394",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "github-action-test",
    "0xe6bcd785b90dc16d667b022cc871c046587d9ac5",
    "0xD8a394e7d7894bDF2C57139fF17e5CBAa29Dd977"
  ],
  "numDeployments": 1,
  "solcInputHash": "7ac76b03d66c99a0cb97823d66208ce3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_repositoryName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_funderAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"issue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pullRequest\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"commitHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Paid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"issue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"previousCommitHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Taken\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contributions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"issue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"previousCommitHash\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"pullRequest\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"commitHash\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_issue\",\"type\":\"uint256\"}],\"name\":\"flush\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"funderAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_issue\",\"type\":\"uint256\"}],\"name\":\"getIssue\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"issue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"previousCommitHash\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"pullRequest\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"commitHash\",\"type\":\"string\"}],\"internalType\":\"struct Pattini.Contribution\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_issue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pullRequest\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_commitHash\",\"type\":\"string\"}],\"name\":\"pay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repositoryName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_issue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_previousCommitHash\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"take\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Pattini.sol\":\"Pattini\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Pattini.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract Pattini is Ownable {\\n    string public repositoryName;\\n    address public tokenAddress;\\n    address public funderAddress;\\n\\n    struct Contribution {\\n        uint256 issue; // issue number\\n        uint256 amount; // `amount` Github project custom field\\n        string previousCommitHash; // hash before contrib // example: 6d0b2cb70a365dfc2e62136f134741bd5ac21a97 // git rev-parse HEAD\\n        address recipient; // contributor address\\n        bool paid;\\n        uint256 pullRequest;\\n        string commitHash;\\n    }\\n\\n    Contribution[] public contributions;\\n\\n    event Taken(\\n        uint256 indexed issue,\\n        uint256 indexed amount,\\n        address indexed recipient,\\n        string previousCommitHash,\\n        uint256 timestamp\\n    );\\n\\n    event Paid(\\n        uint256 indexed issue,\\n        uint256 indexed pullRequest,\\n        string indexed commitHash,\\n        uint256 timestamp\\n    );\\n\\n    constructor(string memory _repositoryName, address _tokenAddress, address _funderAddress) {\\n        repositoryName = _repositoryName;\\n        funderAddress = _funderAddress;\\n        tokenAddress = _tokenAddress;\\n    }\\n\\n    modifier onlyFunder() {\\n        require(msg.sender == funderAddress, \\\"Caller is not the funder\\\");\\n        _;\\n    }\\n\\n    function take(\\n        uint256 _issue,\\n        uint256 _amount,\\n        string memory _previousCommitHash,\\n        address _recipient\\n    ) public onlyOwner {\\n        // TODO: check if already taken\\n        contributions.push(\\n            Contribution({\\n                issue: _issue,\\n                amount: _amount,\\n                previousCommitHash: _previousCommitHash,\\n                recipient: _recipient,\\n                paid: false,\\n                pullRequest: 0,\\n                commitHash: \\\"unset\\\"\\n            })\\n        );\\n        emit Taken(_issue, _amount, _recipient, _previousCommitHash, block.timestamp);\\n    }\\n\\n    function pay(uint256 _issue, uint256 _pullRequest, string memory _commitHash) public onlyOwner {\\n        uint256 i = getIndex(_issue);\\n        contributions[i].pullRequest = _pullRequest;\\n        contributions[i].commitHash = _commitHash;\\n        contributions[i].paid = true;\\n\\n        ERC20(tokenAddress).transfer(\\n            contributions[i].recipient,\\n            contributions[i].amount * 10 ** 18\\n        );\\n        emit Paid(_issue, _pullRequest, _commitHash, block.timestamp);\\n    }\\n\\n    function flush(uint256 _issue) public onlyFunder {\\n        // TODO: sends the whole balance to funder\\n    }\\n\\n    function getIndex(uint256 _issue) private view returns (uint256) {\\n        uint256 result;\\n\\n        for (uint256 i; i < contributions.length; i++) {\\n            if (contributions[i].issue == _issue) {\\n                result = i;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    function getIssue(uint256 _issue) public view returns (Contribution memory) {\\n        uint256 index = getIndex(_issue);\\n        return contributions[index];\\n    }\\n\\n    receive() external payable {\\n        revert();\\n    }\\n\\n    fallback() external payable {\\n        revert();\\n    }\\n}\\n\",\"keccak256\":\"0x3f26efe28f0d4277a075bc84aeedcf462d0e4528c23865f0436dd7f5c1fa6853\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200145338038062001453833981016040819052620000349162000107565b6200003f3362000084565b60016200004d848262000290565b50600380546001600160a01b039283166001600160a01b03199182161790915560028054939092169216919091179055506200035c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200010257600080fd5b919050565b6000806000606084860312156200011d57600080fd5b83516001600160401b03808211156200013557600080fd5b818601915086601f8301126200014a57600080fd5b8151818111156200015f576200015f620000d4565b604051601f8201601f19908116603f011681019083821181831017156200018a576200018a620000d4565b81604052828152602093508984848701011115620001a757600080fd5b600091505b82821015620001cb5784820184015181830185015290830190620001ac565b6000848483010152809750505050620001e6818701620000ea565b93505050620001f860408501620000ea565b90509250925092565b600181811c908216806200021657607f821691505b6020821081036200023757634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200028b57600081815260208120601f850160051c81016020861015620002665750805b601f850160051c820191505b81811015620002875782815560010162000272565b5050505b505050565b81516001600160401b03811115620002ac57620002ac620000d4565b620002c481620002bd845462000201565b846200023d565b602080601f831160018114620002fc5760008415620002e35750858301515b600019600386901b1c1916600185901b17855562000287565b600085815260208120601f198616915b828110156200032d578886015182559484019460019091019084016200030c565b50858210156200034c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6110e7806200036c6000396000f3fe6080604052600436106100a05760003560e01c80639d76ea58116100645780639d76ea5814610183578063ab8cf592146101a3578063adec5ed5146101c3578063b3d1958d146101e3578063d98820e514610203578063f2fde38b1461022357600080fd5b80631cee0700146100af578063715018a6146100eb57806386019a3f146101025780638da5cb5b14610124578063976b31131461015657600080fd5b366100aa57600080fd5b600080fd5b3480156100bb57600080fd5b506100cf6100ca366004610bbc565b610243565b6040516100e29796959493929190610c25565b60405180910390f35b3480156100f757600080fd5b506101006103b7565b005b34801561010e57600080fd5b506101176103cb565b6040516100e29190610c82565b34801561013057600080fd5b506000546001600160a01b03165b6040516001600160a01b0390911681526020016100e2565b34801561016257600080fd5b50610176610171366004610bbc565b610459565b6040516100e29190610c9c565b34801561018f57600080fd5b5060025461013e906001600160a01b031681565b3480156101af57600080fd5b506101006101be366004610dbe565b610650565b3480156101cf57600080fd5b5060035461013e906001600160a01b031681565b3480156101ef57600080fd5b506101006101fe366004610bbc565b610850565b34801561020f57600080fd5b5061010061021e366004610e2a565b6108b2565b34801561022f57600080fd5b5061010061023e366004610e8b565b610a44565b6004818154811061025357600080fd5b906000526020600020906006020160009150905080600001549080600101549080600201805461028290610ea6565b80601f01602080910402602001604051908101604052809291908181526020018280546102ae90610ea6565b80156102fb5780601f106102d0576101008083540402835291602001916102fb565b820191906000526020600020905b8154815290600101906020018083116102de57829003601f168201915b505050506003830154600484015460058501805494956001600160a01b03841695600160a01b90940460ff169450919261033490610ea6565b80601f016020809104026020016040519081016040528092919081815260200182805461036090610ea6565b80156103ad5780601f10610382576101008083540402835291602001916103ad565b820191906000526020600020905b81548152906001019060200180831161039057829003601f168201915b5050505050905087565b6103bf610aba565b6103c96000610b14565b565b600180546103d890610ea6565b80601f016020809104026020016040519081016040528092919081815260200182805461040490610ea6565b80156104515780601f1061042657610100808354040283529160200191610451565b820191906000526020600020905b81548152906001019060200180831161043457829003601f168201915b505050505081565b6104a46040518060e0016040528060008152602001600081526020016060815260200160006001600160a01b0316815260200160001515815260200160008152602001606081525090565b60006104af83610b64565b9050600481815481106104c4576104c4610ee0565b90600052602060002090600602016040518060e0016040529081600082015481526020016001820154815260200160028201805461050190610ea6565b80601f016020809104026020016040519081016040528092919081815260200182805461052d90610ea6565b801561057a5780601f1061054f5761010080835404028352916020019161057a565b820191906000526020600020905b81548152906001019060200180831161055d57829003601f168201915b505050918352505060038201546001600160a01b0381166020830152600160a01b900460ff1615156040820152600482015460608201526005820180546080909201916105c690610ea6565b80601f01602080910402602001604051908101604052809291908181526020018280546105f290610ea6565b801561063f5780601f106106145761010080835404028352916020019161063f565b820191906000526020600020905b81548152906001019060200180831161062257829003601f168201915b505050505081525050915050919050565b610658610aba565b600061066384610b64565b9050826004828154811061067957610679610ee0565b90600052602060002090600602016004018190555081600482815481106106a2576106a2610ee0565b906000526020600020906006020160050190816106bf9190610f45565b506001600482815481106106d5576106d5610ee0565b600091825260209091206003600690920201018054911515600160a01b0260ff60a01b19909216919091179055600254600480546001600160a01b039092169163a9059cbb91908490811061072c5761072c610ee0565b906000526020600020906006020160030160009054906101000a90046001600160a01b03166004848154811061076457610764610ee0565b906000526020600020906006020160010154670de0b6b3a7640000610789919061101b565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156107d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f89190611038565b5081604051610807919061105a565b604051809103902083857ff0e74f72c12106ef5541e0ac1058db573fed743af271350b4a302886cdadfdb84260405161084291815260200190565b60405180910390a450505050565b6003546001600160a01b031633146108af5760405162461bcd60e51b815260206004820152601860248201527f43616c6c6572206973206e6f74207468652066756e646572000000000000000060448201526064015b60405180910390fd5b50565b6108ba610aba565b6040805160e08101825285815260208082018681528284018681526001600160a01b038616606085015260006080850181905260a08501819052855180870190965260058652641d5b9cd95d60da1b9386019390935260c0840194909452600480546001810182559252825160069092027f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b810192835590517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c8201559251919290917f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19d909101906109ac9082610f45565b50606082015160038201805460808501511515600160a01b026001600160a81b03199091166001600160a01b039093169290921791909117905560a0820151600482015560c08201516005820190610a049082610f45565b505050806001600160a01b031683857f78cbe14fe148897fb94270720ef35a8336ba82aac73f09ddce6ad58ec456fb4d8542604051610842929190611076565b610a4c610aba565b6001600160a01b038116610ab15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016108a6565b6108af81610b14565b6000546001600160a01b031633146103c95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108a6565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008060005b600454811015610bb5578360048281548110610b8857610b88610ee0565b90600052602060002090600602016000015403610ba3578091505b80610bad81611098565b915050610b6a565b5092915050565b600060208284031215610bce57600080fd5b5035919050565b60005b83811015610bf0578181015183820152602001610bd8565b50506000910152565b60008151808452610c11816020860160208601610bd5565b601f01601f19169290920160200192915050565b87815286602082015260e060408201526000610c4460e0830188610bf9565b6001600160a01b0387166060840152851515608084015260a0830185905282810360c0840152610c748185610bf9565b9a9950505050505050505050565b602081526000610c956020830184610bf9565b9392505050565b6020815281516020820152602082015160408201526000604083015160e06060840152610ccd610100840182610bf9565b905060018060a01b0360608501511660808401526080840151151560a084015260a084015160c084015260c0840151601f198483030160e0850152610d128282610bf9565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610d4257600080fd5b813567ffffffffffffffff80821115610d5d57610d5d610d1b565b604051601f8301601f19908116603f01168101908282118183101715610d8557610d85610d1b565b81604052838152866020858801011115610d9e57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600060608486031215610dd357600080fd5b8335925060208401359150604084013567ffffffffffffffff811115610df857600080fd5b610e0486828701610d31565b9150509250925092565b80356001600160a01b0381168114610e2557600080fd5b919050565b60008060008060808587031215610e4057600080fd5b8435935060208501359250604085013567ffffffffffffffff811115610e6557600080fd5b610e7187828801610d31565b925050610e8060608601610e0e565b905092959194509250565b600060208284031215610e9d57600080fd5b610c9582610e0e565b600181811c90821680610eba57607f821691505b602082108103610eda57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b601f821115610f4057600081815260208120601f850160051c81016020861015610f1d5750805b601f850160051c820191505b81811015610f3c57828155600101610f29565b5050505b505050565b815167ffffffffffffffff811115610f5f57610f5f610d1b565b610f7381610f6d8454610ea6565b84610ef6565b602080601f831160018114610fa85760008415610f905750858301515b600019600386901b1c1916600185901b178555610f3c565b600085815260208120601f198616915b82811015610fd757888601518255948401946001909101908401610fb8565b5085821015610ff55787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761103257611032611005565b92915050565b60006020828403121561104a57600080fd5b81518015158114610c9557600080fd5b6000825161106c818460208701610bd5565b9190910192915050565b6040815260006110896040830185610bf9565b90508260208301529392505050565b6000600182016110aa576110aa611005565b506001019056fea26469706673582212207ba278153527270ecd073c8f38629ec12715b059bf3ef4802377dd649af90f7464736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106100a05760003560e01c80639d76ea58116100645780639d76ea5814610183578063ab8cf592146101a3578063adec5ed5146101c3578063b3d1958d146101e3578063d98820e514610203578063f2fde38b1461022357600080fd5b80631cee0700146100af578063715018a6146100eb57806386019a3f146101025780638da5cb5b14610124578063976b31131461015657600080fd5b366100aa57600080fd5b600080fd5b3480156100bb57600080fd5b506100cf6100ca366004610bbc565b610243565b6040516100e29796959493929190610c25565b60405180910390f35b3480156100f757600080fd5b506101006103b7565b005b34801561010e57600080fd5b506101176103cb565b6040516100e29190610c82565b34801561013057600080fd5b506000546001600160a01b03165b6040516001600160a01b0390911681526020016100e2565b34801561016257600080fd5b50610176610171366004610bbc565b610459565b6040516100e29190610c9c565b34801561018f57600080fd5b5060025461013e906001600160a01b031681565b3480156101af57600080fd5b506101006101be366004610dbe565b610650565b3480156101cf57600080fd5b5060035461013e906001600160a01b031681565b3480156101ef57600080fd5b506101006101fe366004610bbc565b610850565b34801561020f57600080fd5b5061010061021e366004610e2a565b6108b2565b34801561022f57600080fd5b5061010061023e366004610e8b565b610a44565b6004818154811061025357600080fd5b906000526020600020906006020160009150905080600001549080600101549080600201805461028290610ea6565b80601f01602080910402602001604051908101604052809291908181526020018280546102ae90610ea6565b80156102fb5780601f106102d0576101008083540402835291602001916102fb565b820191906000526020600020905b8154815290600101906020018083116102de57829003601f168201915b505050506003830154600484015460058501805494956001600160a01b03841695600160a01b90940460ff169450919261033490610ea6565b80601f016020809104026020016040519081016040528092919081815260200182805461036090610ea6565b80156103ad5780601f10610382576101008083540402835291602001916103ad565b820191906000526020600020905b81548152906001019060200180831161039057829003601f168201915b5050505050905087565b6103bf610aba565b6103c96000610b14565b565b600180546103d890610ea6565b80601f016020809104026020016040519081016040528092919081815260200182805461040490610ea6565b80156104515780601f1061042657610100808354040283529160200191610451565b820191906000526020600020905b81548152906001019060200180831161043457829003601f168201915b505050505081565b6104a46040518060e0016040528060008152602001600081526020016060815260200160006001600160a01b0316815260200160001515815260200160008152602001606081525090565b60006104af83610b64565b9050600481815481106104c4576104c4610ee0565b90600052602060002090600602016040518060e0016040529081600082015481526020016001820154815260200160028201805461050190610ea6565b80601f016020809104026020016040519081016040528092919081815260200182805461052d90610ea6565b801561057a5780601f1061054f5761010080835404028352916020019161057a565b820191906000526020600020905b81548152906001019060200180831161055d57829003601f168201915b505050918352505060038201546001600160a01b0381166020830152600160a01b900460ff1615156040820152600482015460608201526005820180546080909201916105c690610ea6565b80601f01602080910402602001604051908101604052809291908181526020018280546105f290610ea6565b801561063f5780601f106106145761010080835404028352916020019161063f565b820191906000526020600020905b81548152906001019060200180831161062257829003601f168201915b505050505081525050915050919050565b610658610aba565b600061066384610b64565b9050826004828154811061067957610679610ee0565b90600052602060002090600602016004018190555081600482815481106106a2576106a2610ee0565b906000526020600020906006020160050190816106bf9190610f45565b506001600482815481106106d5576106d5610ee0565b600091825260209091206003600690920201018054911515600160a01b0260ff60a01b19909216919091179055600254600480546001600160a01b039092169163a9059cbb91908490811061072c5761072c610ee0565b906000526020600020906006020160030160009054906101000a90046001600160a01b03166004848154811061076457610764610ee0565b906000526020600020906006020160010154670de0b6b3a7640000610789919061101b565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156107d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f89190611038565b5081604051610807919061105a565b604051809103902083857ff0e74f72c12106ef5541e0ac1058db573fed743af271350b4a302886cdadfdb84260405161084291815260200190565b60405180910390a450505050565b6003546001600160a01b031633146108af5760405162461bcd60e51b815260206004820152601860248201527f43616c6c6572206973206e6f74207468652066756e646572000000000000000060448201526064015b60405180910390fd5b50565b6108ba610aba565b6040805160e08101825285815260208082018681528284018681526001600160a01b038616606085015260006080850181905260a08501819052855180870190965260058652641d5b9cd95d60da1b9386019390935260c0840194909452600480546001810182559252825160069092027f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b810192835590517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c8201559251919290917f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19d909101906109ac9082610f45565b50606082015160038201805460808501511515600160a01b026001600160a81b03199091166001600160a01b039093169290921791909117905560a0820151600482015560c08201516005820190610a049082610f45565b505050806001600160a01b031683857f78cbe14fe148897fb94270720ef35a8336ba82aac73f09ddce6ad58ec456fb4d8542604051610842929190611076565b610a4c610aba565b6001600160a01b038116610ab15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016108a6565b6108af81610b14565b6000546001600160a01b031633146103c95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108a6565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008060005b600454811015610bb5578360048281548110610b8857610b88610ee0565b90600052602060002090600602016000015403610ba3578091505b80610bad81611098565b915050610b6a565b5092915050565b600060208284031215610bce57600080fd5b5035919050565b60005b83811015610bf0578181015183820152602001610bd8565b50506000910152565b60008151808452610c11816020860160208601610bd5565b601f01601f19169290920160200192915050565b87815286602082015260e060408201526000610c4460e0830188610bf9565b6001600160a01b0387166060840152851515608084015260a0830185905282810360c0840152610c748185610bf9565b9a9950505050505050505050565b602081526000610c956020830184610bf9565b9392505050565b6020815281516020820152602082015160408201526000604083015160e06060840152610ccd610100840182610bf9565b905060018060a01b0360608501511660808401526080840151151560a084015260a084015160c084015260c0840151601f198483030160e0850152610d128282610bf9565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610d4257600080fd5b813567ffffffffffffffff80821115610d5d57610d5d610d1b565b604051601f8301601f19908116603f01168101908282118183101715610d8557610d85610d1b565b81604052838152866020858801011115610d9e57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600060608486031215610dd357600080fd5b8335925060208401359150604084013567ffffffffffffffff811115610df857600080fd5b610e0486828701610d31565b9150509250925092565b80356001600160a01b0381168114610e2557600080fd5b919050565b60008060008060808587031215610e4057600080fd5b8435935060208501359250604085013567ffffffffffffffff811115610e6557600080fd5b610e7187828801610d31565b925050610e8060608601610e0e565b905092959194509250565b600060208284031215610e9d57600080fd5b610c9582610e0e565b600181811c90821680610eba57607f821691505b602082108103610eda57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b601f821115610f4057600081815260208120601f850160051c81016020861015610f1d5750805b601f850160051c820191505b81811015610f3c57828155600101610f29565b5050505b505050565b815167ffffffffffffffff811115610f5f57610f5f610d1b565b610f7381610f6d8454610ea6565b84610ef6565b602080601f831160018114610fa85760008415610f905750858301515b600019600386901b1c1916600185901b178555610f3c565b600085815260208120601f198616915b82811015610fd757888601518255948401946001909101908401610fb8565b5085821015610ff55787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761103257611032611005565b92915050565b60006020828403121561104a57600080fd5b81518015158114610c9557600080fd5b6000825161106c818460208701610bd5565b9190910192915050565b6040815260006110896040830185610bf9565b90508260208301529392505050565b6000600182016110aa576110aa611005565b506001019056fea26469706673582212207ba278153527270ecd073c8f38629ec12715b059bf3ef4802377dd649af90f7464736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Pattini.sol:Pattini",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 832,
        "contract": "contracts/Pattini.sol:Pattini",
        "label": "repositoryName",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 834,
        "contract": "contracts/Pattini.sol:Pattini",
        "label": "tokenAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 836,
        "contract": "contracts/Pattini.sol:Pattini",
        "label": "funderAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 855,
        "contract": "contracts/Pattini.sol:Pattini",
        "label": "contributions",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(Contribution)851_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Contribution)851_storage)dyn_storage": {
        "base": "t_struct(Contribution)851_storage",
        "encoding": "dynamic_array",
        "label": "struct Pattini.Contribution[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Contribution)851_storage": {
        "encoding": "inplace",
        "label": "struct Pattini.Contribution",
        "members": [
          {
            "astId": 838,
            "contract": "contracts/Pattini.sol:Pattini",
            "label": "issue",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 840,
            "contract": "contracts/Pattini.sol:Pattini",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 842,
            "contract": "contracts/Pattini.sol:Pattini",
            "label": "previousCommitHash",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 844,
            "contract": "contracts/Pattini.sol:Pattini",
            "label": "recipient",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 846,
            "contract": "contracts/Pattini.sol:Pattini",
            "label": "paid",
            "offset": 20,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 848,
            "contract": "contracts/Pattini.sol:Pattini",
            "label": "pullRequest",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 850,
            "contract": "contracts/Pattini.sol:Pattini",
            "label": "commitHash",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}